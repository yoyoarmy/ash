generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Store {
  id          Int          @id @default(autoincrement())
  name        String
  location    String
  brandId     Int
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  mediaSpaces MediaSpace[]
  brand       Brand        @relation(fields: [brandId], references: [id])
}

model MediaSpace {
  id          Int       @id @default(autoincrement())
  mediaItemId Int
  status      String
  storeId     Int
  info        String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  photo       String?
  leases      Lease[]
  mediaItem   MediaItem @relation(fields: [mediaItemId], references: [id])
  store       Store     @relation(fields: [storeId], references: [id])
}


model MediaItem {
  id              Int           @id @default(autoincrement())
  type            String
  dimensions      String
  basePrice       Float
  leaseDuration   Int
  capacity        Int
  format          String
  mediaItemTypeId Int
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  mediaItemType   MediaItemType @relation(fields: [mediaItemTypeId], references: [id])
  mediaSpaces     MediaSpace[]
}

model Brand {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  stores    Store[]
}

model Lease {
  id               Int                    @id @default(autoincrement())
  mediaSpaceId     Int
  customerName     String
  startDate        DateTime
  endDate          DateTime
  amount           Float
  statusId         Int
  orderId          Int?
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  mediaSpace       MediaSpace             @relation(fields: [mediaSpaceId], references: [id])
  order            Order?                 @relation(fields: [orderId], references: [id])
  status           Status                 @relation(fields: [statusId], references: [id])
  extraInformation LeaseExtraInformation?

  @@index([startDate, endDate])
  @@index([statusId])
  @@index([mediaSpaceId])
}

model User {
  id        String   @id @default(cuid())
  name      String?
  email     String   @unique
  password  String
  role      String   @default("USER")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
}

model LeaseExtraInformation {
  id                  Int      @id @default(autoincrement())
  leaseId             Int      @unique
  providerInfo        String
  productDetails      String
  campaignRedirect    String
  marketingGoals      String
  disclaimer          String
  productUrl          String
  targetAudience      String
  brandGraphics       String?
  providerContact     String
  billingType         String[]
  giftCampaignDetails String?
  planAlaMedida       String?
  planAlaMedidaAmount Float?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  lease               Lease    @relation(fields: [leaseId], references: [id])
}

model MediaItemType {
  id         Int         @id @default(autoincrement())
  name       String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  mediaItems MediaItem[]
}

model Order {
  id        Int      @id @default(autoincrement())
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  leases    Lease[]
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Status {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  leases    Lease[]
}

model NotificationSettings {
  id        Int      @id @default(autoincrement())
  brandId   Int      @unique
  email     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
